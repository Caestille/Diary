<UserControl
	x:Class="Diary.Views.MainView"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:animatedicons="clr-namespace:ModernThemables.Icons.AnimatedIcons;assembly=ModernThemables.Icons"
	xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
	xmlns:controls="clr-namespace:ModernThemables.Controls;assembly=ModernThemables"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:scalableicons="clr-namespace:ModernThemables.Icons;assembly=ModernThemables.Icons"
	xmlns:views="clr-namespace:Diary.Views"
	xmlns:vms="clr-namespace:Diary.ViewModels.Views"
	mc:Ignorable="d">
	<b:Interaction.Triggers>
		<b:EventTrigger EventName="Loaded">
			<b:InvokeCommandAction Command="{Binding FormLoadedCommand}" />
		</b:EventTrigger>
	</b:Interaction.Triggers>
	<UserControl.Resources>
		<DataTemplate x:Key="IconTemplate">
			<Grid>
				<Grid.Resources>
					<DataTemplate DataType="{x:Type vms:TakeMeToTodayViewModel}">
						<scalableicons:Icon Kind="Plus" />
					</DataTemplate>
					<DataTemplate DataType="{x:Type vms:CalendarViewModel}">
						<scalableicons:Icon Kind="Calendar" />
					</DataTemplate>
					<DataTemplate DataType="{x:Type vms:DataTaggingViewModel}">
						<scalableicons:Icon Kind="Tag" />
					</DataTemplate>
					<DataTemplate DataType="{x:Type vms:DiaryWeekViewModel}">
						<StackPanel
							Margin="-2,-13,-8,-5"
							IsHitTestVisible="False"
							Visibility="{Binding IsContainingMenuOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:MenuItem}}, Converter={StaticResource VisibleIfFalseConverter}}">
							<TextBlock
								Margin="0,7"
								HorizontalAlignment="Center"
								FontWeight="Bold"
								IsHitTestVisible="False"
								Text="{Binding Path=WeekStart.Day}">
								<TextBlock.Style>
									<Style>
										<Style.Triggers>
											<DataTrigger Binding="{Binding IsSelected}" Value="True">
												<Setter Property="TextBlock.Foreground" Value="{DynamicResource ThemeTextBrush}" />
											</DataTrigger>
											<DataTrigger Binding="{Binding IsSelected}" Value="False">
												<Setter Property="TextBlock.Foreground" Value="{DynamicResource StatusTextBrush}" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</TextBlock.Style>
							</TextBlock>
							<TextBlock
								Margin="0,-6"
								FontWeight="Bold"
								IsHitTestVisible="False"
								Text="{Binding Path=WeekStart, StringFormat=MMM}">
								<TextBlock.Style>
									<Style>
										<Style.Triggers>
											<DataTrigger Binding="{Binding IsSelected}" Value="True">
												<Setter Property="TextBlock.Foreground" Value="{DynamicResource ThemeTextBrush}" />
											</DataTrigger>
											<DataTrigger Binding="{Binding IsSelected}" Value="False">
												<Setter Property="TextBlock.Foreground" Value="{DynamicResource StatusTextBrush}" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</TextBlock.Style>
							</TextBlock>
						</StackPanel>
					</DataTemplate>
					<DataTemplate DataType="{x:Type vms:DiaryMonthViewModel}">
						<Border
							Margin="-2,-5,-8,-5"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							CornerRadius="4">
							<TextBlock
								Margin="0,7"
								FontWeight="Bold"
								IsHitTestVisible="False"
								Text="{Binding Path=ShortName}"
								Visibility="{Binding IsContainingMenuOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:MenuItem}}, Converter={StaticResource VisibleIfFalseConverter}}" />
						</Border>
					</DataTemplate>
					<DataTemplate DataType="{x:Type vms:DiaryYearViewModel}">
						<Border
							Margin="-7,-5,-8,-5"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							CornerRadius="4">
							<TextBlock
								Margin="0,7"
								FontWeight="SemiBold"
								IsHitTestVisible="False"
								Text="{Binding Path=Name}"
								Visibility="{Binding IsContainingMenuOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:MenuItem}}, Converter={StaticResource VisibleIfFalseConverter}}" />
						</Border>
					</DataTemplate>
					<DataTemplate DataType="{x:Type vms:ToDoListViewModel}">
						<scalableicons:Icon Width="16" Kind="ClipboardList" />
					</DataTemplate>
					<DataTemplate DataType="{x:Type vms:RepoBrowserViewModel}">
						<scalableicons:Icon Width="16" Kind="Menu" />
					</DataTemplate>
				</Grid.Resources>
				<ContentControl
					Width="20"
					Height="{Binding RelativeSource={RelativeSource Self}, Path=ActualWidth}"
					Content="{Binding}"
					IsHitTestVisible="False">
					<ContentControl.Style>
						<Style>
							<Style.Triggers>
								<DataTrigger Binding="{Binding IsSelected}" Value="True">
									<Setter Property="ContentControl.Foreground" Value="{DynamicResource ThemeTextBrush}" />
									<Setter Property="ContentControl.Background" Value="{DynamicResource ThemeBackgroundBrush}" />
								</DataTrigger>
								<DataTrigger Binding="{Binding IsSelected}" Value="False">
									<Setter Property="ContentControl.Foreground" Value="{DynamicResource StatusTextBrush}" />
									<Setter Property="ContentControl.Background" Value="{DynamicResource MenuBrush}" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</ContentControl.Style>
				</ContentControl>
			</Grid>
		</DataTemplate>
		<DataTemplate x:Key="ChildItemTemplate">
			<controls:MenuItem
				Title="{Binding Name}"
				AddChildCommand="{Binding AddChildCommand}"
				CanAddChild="{Binding Path=., Converter={StaticResource MenuBehaviourConverter}, ConverterParameter=CanAddChild}"
				CanDelete="{Binding Path=., Converter={StaticResource MenuBehaviourConverter}, ConverterParameter=CanDelete}"
				CanOpen="{Binding Path=., Converter={StaticResource MenuBehaviourConverter}, ConverterParameter=CanOpen}"
				ChildItemTemplate="{DynamicResource ChildItemTemplate}"
				ChildItems="{Binding ChildViewModels}"
				Icon="{Binding}"
				IconTemplate="{StaticResource IconTemplate}"
				IsContainingMenuOpen="{Binding ElementName=Menu, Path=IsMenuOpen}"
				IsSelected="{Binding IsSelected, Mode=TwoWay}"
				IsOpen="{Binding IsExpanded, Mode=TwoWay}"
				ReserveIconSpace="True"
				SelectCommand="{Binding SelectCommand}" />
		</DataTemplate>
		<DataTemplate DataType="{x:Type vms:DiaryWeekViewModel}">
			<views:DiaryWeekView />
		</DataTemplate>
		<DataTemplate DataType="{x:Type vms:DataTaggingViewModel}">
			<views:DataTaggingView />
		</DataTemplate>
		<DataTemplate DataType="{x:Type vms:ToDoListViewModel}">
			<views:ToDoListView />
		</DataTemplate>
		<DataTemplate DataType="{x:Type vms:RepoBrowserViewModel}">
			<views:RepoBrowserView />
		</DataTemplate>
	</UserControl.Resources>
	<Grid>
		<Grid.Clip>
			<RectangleGeometry Rect="0,0,10000,10000" />
		</Grid.Clip>
		<!--#region Main content control-->
		<ContentControl
			x:Name="ContentControl"
			Grid.Column="1"
			Content="{Binding Path=VisibleViewModel, UpdateSourceTrigger=PropertyChanged, IsAsync=True}"
			Focusable="False"
			Foreground="{DynamicResource TextBrush}">
			<ContentControl.Style>
				<Style>
					<Style.Triggers>
						<DataTrigger Binding="{Binding ElementName=Menu, Path=IsMenuPinned}" Value="False">
							<DataTrigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<ThicknessAnimation
											AutoReverse="False"
											Storyboard.TargetProperty="Margin"
											To="45,0,0,0"
											Duration="0:0:0.1">
											<ThicknessAnimation.EasingFunction>
												<CircleEase EasingMode="EaseIn" />
											</ThicknessAnimation.EasingFunction>
										</ThicknessAnimation>
									</Storyboard>
								</BeginStoryboard>
							</DataTrigger.EnterActions>
							<DataTrigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<ThicknessAnimation
											AutoReverse="False"
											Storyboard.TargetProperty="Margin"
											To="220,0,0,0"
											Duration="0:0:0.1">
											<ThicknessAnimation.EasingFunction>
												<CircleEase EasingMode="EaseIn" />
											</ThicknessAnimation.EasingFunction>
										</ThicknessAnimation>
									</Storyboard>
								</BeginStoryboard>
							</DataTrigger.ExitActions>
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</ContentControl.Style>
		</ContentControl>
		<!--#endregion-->
		<controls:Menu
			x:Name="Menu"
			HorizontalAlignment="Left"
			VerticalAlignment="Stretch"
			BlurBackground="{Binding ElementName=ContentControl}"
			IsMenuOpen="{Binding IsMenuOpen, Mode=TwoWay}"
			ItemTemplate="{StaticResource ChildItemTemplate}"
			Items="{Binding ChildViewModels}" />
	</Grid>
</UserControl>